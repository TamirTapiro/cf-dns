#!/bin/bash -e

options=$(getopt -n cf-dns -o hqc:g:t:v:u: --long help,quiet,credentials:,get:,type:,value:update: -- "$@")

# '-n' replacing file name in case of an error
# '-o' stands for options (short options - only one char)
#option with ':' means that after it -must- come an argument, '::' means that -should- come an argumet, and without ':' is just a flag like help or quiet
#--long stands for long options
#what comes after '--' is the argumets to parse by getopt

exitStatus=0


#echo "$options"
eval set -- "$options"
G_FLAG=false
T_FLAG=false
V_FLAG=false
C_FLAG=false
U_FLAG=false

arr=("A" "AAAA" "CNAME" "TXT" "SRV" "LOC" "MX" "NS" "SPF")
HELP="this is help description for cf-dns script."
QUIET=false
MAIL=""
APIKEY=""
SUBDOMAIN=""
TYPE=""
VALUE=""
UPDATE=""
zoneID=""
urlID=""
CREDENTIALS="$CF_CREDENTIALS"


while true; do
    case "$1" in

    -h | --help )
        echo "$HELP" 
		exit 1
        ;;

    -q | --quiet )
        QUIET=true
		exec 2>/dev/null
        ;;

    -g | --get )
		G_FLAG=true
        SUBDOMAIN="${2}"
		#if [[ ! $SUBDOMAIN =~ ^[a-z_-]++."tk"$ ]]; then ###need to be handeled
  		#	echo "cf-dns: subdomain does not look right" 1>&2
		#	exit 1
		#fi
		shift
        ;;

    -t | --type )
		T_FLAG=true
        TYPE="${2}"
		if [[ $TYPE =~ ^[a-z_-]+$ ]]; then	#convert lowercase into uppercase
			TYPE=$(echo $TYPE | tr [a-z] [A-Z])
		fi
		if [[ ! " ${arr[*]} " == *" $TYPE "* ]]; then #check if the type is fit to cloudflare api
				echo "type is not valid according the CloudFlare API." 1>&2  
				exit 1     
		fi
		shift
        ;;

    -v | --value )
		V_FLAG=true
        VALUE="${2}"
		shift
        ;;

	-u | --update)
		U_FLAG=true
		SUBDOMAIN="${2}"
		;;

    -c | --credentials )
		C_FLAG=true
		CREDENTIALS="${2}"
		MAIL="${CREDENTIALS%:*}"
		APIKEY="${CREDENTIALS#*:}"
		if [[ ! $MAIL =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$ ]]; then 
			echo "cf-dns: credentials do not contain an email component." 1>&2
			exit 1
		fi

		if [[ ! $APIKEY =~ ^[a-z0-9_-]+$ ]]; then 
			echo "cf-dns: credentials do not contain an API component." 1>&2
			exit 1
		fi
		shift
        ;;

    --)
		if [ ! -z "$2" ];then
			echo "cf-dns: unknown extra arguments" 1>&2
			exit 1
		fi
        shift
        break
        ;;

    esac
    shift
done

if [ "$C_FLAG" = false ]; then #checking if the user didnt specified -c, we check if there is env var for this
	MAIL="${CREDENTIALS%:*}"
	APIKEY="${CREDENTIALS#*:}"
fi

if [ -z "$TYPE" ];then
	echo "cf-dns: DNS entry type not specified" 1>&2
	exit 1
fi

zoneID=$(./getZoneId "${MAIL}" "${APIKEY}")
urlID=$(./getID "${zoneID}" "${MAIL}" "${APIKEY}" "$SUBDOMAIN")


if [ "$G_FLAG" = true ]; then # -g | --get option for details
	if [ \( -n "${SUBDOMAIN}" \) -a \( -n "${TYPE}" \) -a \( -n "${MAIL}" \) -a \( -n "${APIKEY}" \) ]; then

		zoneID=$(./getZoneId "${MAIL}" "${APIKEY}")
		if [ "$zoneID" = "null" ]; then
			echo "cf-dns: could not invoke CloudFlare API (bad credentials?)" 1>&2
			exit 1
		else
			jqObj=$(./dnsDetails "$zoneID" "$MAIL" "$APIKEY")
			#type=$(echo "$jqObj" | grep -Eo "type: ${TYPE}" | sed -r 's/^type: //' )
			#echo "$type"
			domain=$(echo "$jqObj" | grep -Eo "\bname: ${SUBDOMAIN}" | sed -r 's/^name: //' )
			if [ ! "$domain" = "$SUBDOMAIN" ]; then
				echo "cf-dns: could not retrieve zone ID, probably wrong domain" 1>&2
				exit 1
			else
				host "${SUBDOMAIN}" | awk '{print $4}'
			fi
		fi 
	fi 
fi

if [ "$U_FLAG" = true ]; then #user wnats to update details
	if [ -n "$VALUE" ];then 
		if [ -z "$urlID" ];then #the update value is not an exsit entry
			create=$(./dnsCreate "$zoneID" "$MAIL" "$APIKEY" "$TYPE" "$SUBDOMAIN" "$VALUE")
			if [ "$status" -eq 0 ];then
				echo "Creating new entry"
				exit 0
			else
				echo "cf-dns: could not invoke CloudFlare API (bad credentials?)" 1>&2
				exit 1
		fi		

		fi
		status=$(./dnsUpdate "$zoneID" "$urlID" "$MAIL" "$APIKEY" "$TYPE" "$SUBDOMAIN" "$VALUE")
		if [ "$status" -eq 0 ];then
			echo "Updating existing entry"
			exit 0
		else
			echo "cf-dns: could not invoke CloudFlare API (bad credentials?)" 1>&2
			exit 1
		fi
	else #user choose to update but didnt pass a value
		echo "update value must been given!" 1>&2
		exit 1
	fi
fi
